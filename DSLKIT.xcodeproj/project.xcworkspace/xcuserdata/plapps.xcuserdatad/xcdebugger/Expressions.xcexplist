<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "closure #2 in static StringOperators.registerAll():StringOperators.swift">
         <PersistentStrings>
            <PersistentString
               value = "str.uppercased()">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #2 in static LogicOperators.registerAll():LogicOperators.swift">
         <PersistentStrings>
            <PersistentString
               value = "areEqual(null, null)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static ToggleView.render(_:context:):ToggleView.swift">
         <PersistentStrings>
            <PersistentString
               value = "node[&quot;var&quot;] as? String">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #2 in static ArrayCommands.registerAll():ArrayCommands.swift">
         <PersistentStrings>
            <PersistentString
               value = "array.count">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static ListView.render(_:context:):ListView.swift">
         <PersistentStrings>
            <PersistentString
               value = "node[&quot;children&quot;]">
            </PersistentString>
            <PersistentString
               value = "(node[&quot;data&quot;] as? [String: Any])">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #1 in static ArrayCommands.registerAll():ArrayCommands.swift">
      </ContextState>
      <ContextState
         contextName = "closure #1 in closure #2 in static ListView.render(_:context:):ListView.swift">
      </ContextState>
      <ContextState
         contextName = "static LogicOperators.areEqual(_:_:):LogicOperators.swift">
         <PersistentStrings>
            <PersistentString
               value = "rhs is NSNull">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "DSLExpression.resolvePath(_:context:):DSLExpression.swift">
         <PersistentStrings>
            <PersistentString
               value = "dict[key]">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #6 in static MathOperators.registerAll():MathOperators.swift">
         <PersistentStrings>
            <PersistentString
               value = "Int.random(in: minInt...maxInt)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #1 in DSLApp.body.getter:App.swift">
         <PersistentStrings>
            <PersistentString
               value = "appContext.get(&quot;environmentColorScheme&quot;)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static ProgressViewComponent.render(_:context:):ProgressView.swift">
         <PersistentStrings>
            <PersistentString
               value = "DSLExpression.shared.evaluate(valueExpr, context) as? NSNumber">
            </PersistentString>
            <PersistentString
               value = "DSLExpression.shared.evaluate(valueExpr, context) as? Double">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "DSLExpression.evaluate(_:_:):DSLExpression.swift">
         <PersistentStrings>
            <PersistentString
               value = "DSLOperatorRegistry.shared.evaluate(opName, input: evaluatedInput, context: context)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
   </ContextStates>
</VariablesViewState>
